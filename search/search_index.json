{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pictify API","text":"<p>Generate perfect Images and Gifs using the Pictify API.</p> <p></p> <p>The API generates high quality images and gifs from HTML/CSS code. It is very easy to use and you can get started in minutes.</p> <ul> <li>Convert HTML/CSS to Image or Gif</li> <li>Convert URL to Image or Gif</li> <li>Create reusable templates</li> </ul>"},{"location":"#convert-htmlcss-to-image","title":"Convert HTML/CSS to Image","text":"<p>The following image was generated using our API.</p> <p></p> <p></p>"},{"location":"#quick-start-code","title":"Quick Start Code","text":"<p>Look at the example code to get started quickly.</p> <ul> <li>Javascript</li> <li>Python</li> <li>PHP</li> <li>Ruby</li> <li>Java</li> <li>C#</li> <li>Go</li> <li>Curl</li> </ul> <p>You can also use integrate with Zapier, Integromat, and Pabbly Connect.</p>"},{"location":"#example-use-cases","title":"Example Use Cases","text":"<p>Here are some of the examples for which you can use the API to automate your media generation and create better experiences for your users.</p>"},{"location":"#social-images-devto","title":"Social Images : Dev.to","text":"<p>Dev.to is a popular platform for developers to share their knowledge and experiences. It generates thousands of custom images for social media every day.</p> <p></p>"},{"location":"#profile-images-peerlist","title":"Profile Images : Peerlist","text":"<p>Peerlist is a platform for developers, designers, product mangers and founders to connect with each other. It generates custom images for user profiles.</p> <p></p>"},{"location":"#onboarding-images-graphic-to-be-included-in-email","title":"Onboarding Images : Graphic to be included in Email","text":"<p>You can use the API to create better onboarding experiences for your users by generating custom images/gifs for your emails.</p> <p></p>"},{"location":"#capture-screenshots-website","title":"Capture Screenshots : Website","text":"<p>You can use the API to capture screenshots of websites. Following is an screenshot of webflow.com generated using the API.</p> <p></p>"},{"location":"example-code/","title":"Example Code","text":"<p>To get started quickly, you can use the following code snippets to generate images and gifs using the Pictify API.</p>"},{"location":"example-code/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Javascript</li> <li>Python</li> <li>PHP</li> <li>Ruby</li> <li>Java</li> <li>C#</li> <li>Go</li> <li>Curl</li> </ul> <p>Endpoint for generating Image -:</p> <pre><code>POST https://api.pictify.io/image\n</code></pre> <p>Endpoint for generating Gif -:</p> <pre><code>POST https://api.pictify.io/gif\n</code></pre> <p>All the other parameters are same for both the endpoints.</p>"},{"location":"example-code/#javascript","title":"Javascript","text":"<pre><code>const axios = require('axios');\nconst data = JSON.stringify({\n    \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\n});\nconst header = {\n    Authorization: 'Bearer access_token',\n}\nconst config = {\n    method: 'post',\n    url: 'https://api.pictify.io/image',\n    headers: header,\n    data: data\n};\nconst image = await axios(config);\n</code></pre>"},{"location":"example-code/#python","title":"Python","text":"<pre><code>import requests\nimport json\n\nurl = \"https://api.pictify.io/image\"\n\npayload = {'html': 'Hello World'}\nheaders = {'Authorization': 'Bearer access_token', 'Content-Type': 'application/json'}\nresponse = requests.post(url, data=json.dumps(payload), headers=headers)\n\nimage = response.json()\n</code></pre>"},{"location":"example-code/#php","title":"PHP","text":"<pre><code>&lt;?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL =&gt; 'https://api.pictify.io/image',\n  CURLOPT_RETURNTRANSFER =&gt; true,\n  CURLOPT_ENCODING =&gt; '',\n  CURLOPT_MAXREDIRS =&gt; 10,\n  CURLOPT_TIMEOUT =&gt; 0,\n  CURLOPT_FOLLOWLOCATION =&gt; true,\n  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST =&gt; 'POST',\n  CURLOPT_POSTFIELDS =&gt;'{\n    \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\n}',\n  CURLOPT_HTTPHEADER =&gt; array(\n    'Authorization: Bearer access_token',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\n\n$image = json_decode($response, true);\n\n?&gt;\n</code></pre>"},{"location":"example-code/#ruby","title":"Ruby","text":"<pre><code>\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\n\nuri = URI.parse(\"https://api.pictify.io/image\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(uri.request_uri)\nrequest[\"Authorization\"] = \"Bearer access_token\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest.body = JSON.dump({\n  \"html\" =&gt; \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\n})\n\nresponse = http.request(request)\nimage = JSON.parse(response.body)\n\n</code></pre>"},{"location":"example-code/#java","title":"Java","text":"<pre><code>\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) throws IOException {\n    URL url = new URL(\"https://api.pictify.io/image\");\n    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n    con.setRequestMethod(\"POST\");\n    con.setRequestProperty(\"Authorization\", \"Bearer access_token\");\n    con.setRequestProperty(\"Content-Type\", \"application/json\");\n    con.setDoOutput(true);\n    String jsonInputString = \"{\\\"html\\\": \\\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\\\"}\";\n    try(OutputStream os = con.getOutputStream()) {\n        byte[] input = jsonInputString.getBytes(\"utf-8\");\n        os.write(input, 0, input.length);           \n    }\n    try(BufferedReader br = new BufferedReader(\n        new InputStreamReader(con.getInputStream(), \"utf-8\"))) {\n        StringBuilder response = new StringBuilder();\n        String responseLine = null;\n        while ((responseLine = br.readLine()) != null) {\n            response.append(responseLine.trim());\n        }\n        System.out.println(response.toString());\n    }\n  }\n}\n\n</code></pre>"},{"location":"example-code/#c","title":"C#","text":"<pre><code>\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Text;\n\nclass Program\n{\n    static readonly HttpClient client = new HttpClient();\n\n    static async Task Main()\n    {\n        var url = \"https://api.pictify.io/image\";\n        var data = new StringContent(\"{\\\"html\\\": \\\"&lt;h1&gt;Hello World&lt;/h1&gt;\\\"}\", Encoding.UTF8, \"application/json\");\n\n        client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer access_token\");\n\n        var response = await client.PostAsync(url, data);\n\n        string image = await response.Content.ReadAsStringAsync();\n    }\n}\n\n</code></pre>"},{"location":"example-code/#go","title":"Go","text":"<pre><code>\npackage main\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"net/http\"\n)\nfunc main() {\n    url := \"https://api.pictify.io/image\"\n    payload := []byte(\"{\"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"}\")\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(payload))\n    req.Header.Set(\"Authorization\", \"Bearer access_token\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer resp.Body.Close()\n    body, _ := ioutil.ReadAll(resp.Body)\n}\n\n</code></pre>"},{"location":"example-code/#curl","title":"Curl","text":"<pre><code>curl --location --request POST 'https://api.pictify.io/image' \\\n--header 'Authorization: Bearer access_token' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"html\": \"&lt;h1&gt;Hello World&lt;/h1&gt;\"}'\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#is-there-a-rate-limit-for-the-api","title":"Is there a rate limit for the API?","text":"<p>No, there is no rate limit for the API. You can make as many requests as you want until you exhaust your plan limit.</p>"},{"location":"faq/#what-is-the-maximum-size-of-the-imagegif-that-can-be-generated","title":"What is the maximum size of the image/gif that can be generated?","text":"<p>There is no limit on the size of the image/gif that can be generated. However, we recommend that you keep the size of the image/gif below 5MB. The larger the size of the image/gif, the longer it will take to generate.</p>"},{"location":"faq/#what-is-the-maximum-duration-of-the-gif-that-can-be-generated","title":"What is the maximum duration of the gif that can be generated?","text":"<p>There is no limit on the duration of the gif that can be generated. However, we recommend that you keep the duration of the gif below 10 seconds. The longer the duration of the gif, the longer it will take to generate.</p>"},{"location":"faq/#can-i-use-external-css-and-js-in-my-html","title":"Can I use external CSS and JS in my HTML?","text":"<p>Yes, you can use external CSS and JS in your HTML. Just embed the CSS and JS in your HTML using the <code>&lt;link&gt;</code> and <code>&lt;script&gt;</code> tags and make sure that the CSS and JS files are publicly accessible.</p>"},{"location":"faq/#can-i-use-custom-fonts-in-my-html","title":"Can I use custom fonts in my HTML?","text":"<p>Yes, you can use custom fonts in your HTML. Just embed the font using the <code>@font-face</code> rule or the <code>&lt;link&gt;</code> tag.</p>"},{"location":"faq/#can-i-use-external-images-in-my-html","title":"Can I use external images in my HTML?","text":"<p>Yes, you can use external images in your HTML. Just make sure that the images are publicly accessible.</p>"},{"location":"faq/#how-long-does-url-for-imagegif-work","title":"How long does url for image/gif work?","text":"<p>The url for image/gif is valid for forever unless you delete the image/gif.</p>"},{"location":"faq/#none-of-the-current-plans-fit-my-needs-can-i-get-a-custom-plan","title":"None of the current plans fit my needs. Can I get a custom plan?","text":"<p>Yes, you can get a custom plan. Please contact us at support@pictify.io to get a custom plan.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Get your API key and start generating images and gifs in minutes.</p> <p></p>"},{"location":"getting-started/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Using The API</li> <li>Media Width and Height</li> <li>Support</li> </ul>"},{"location":"getting-started/#using-the-api","title":"Using The API","text":""},{"location":"getting-started/#authentication","title":"Authentication","text":"<ul> <li>You need to pass your API key as a <code>authorization</code> header in all the requests. You can get your API key from the dashboard.</li> <li>Treat your API key as a password. Do not share it with anyone. If you think your API key has been compromised, you can delete it from the dashboard and create a new one.</li> </ul>"},{"location":"getting-started/#creating-a-image","title":"Creating a Image","text":"<p>Make a HTTP request to the following endpoint to create a image.</p> <pre><code>POST https://api.pictify.io/image\n</code></pre> <p>Parameters</p> Parameter Type Description <code>html</code> * <code>string</code> HTML code to be converted to image. You can send HTML snippets (<code>&lt;div&gt;...&lt;/div&gt;</code>) or full HTML documents (<code>&lt;html&gt;...&lt;/html&gt;</code>) <code>css</code> <code>string</code> CSS code to be applied to the HTML. <code>width</code> <code>number</code> Width of the viewport in pixels. <code>height</code> <code>number</code> Height of the viewport in pixels. <code>quality</code> <code>number</code> Quality of the image. Can be a number between 0 and 100. <code>template</code> * <code>string</code> ID of the template to be used. <code>variables</code> <code>object</code> Variables to be used in the template. <code>url</code> * <code>string</code> URL of the webpage to be converted to image. Required Parameters Description <code>html</code>, <code>url</code>, or <code>template</code> You need to send either <code>html</code>, <code>url</code> or <code>template</code> parameter. <code>variables</code> You need to send <code>variables</code> parameter if you are using a template. <p>Example Response</p> <p><code>STATUS: 200 OK</code></p> <pre><code>{\n    \"url\": \"https://htgf.s3.amazonaws.com/9tv83-1698983654151.png\"\n}\n</code></pre> <p><code>STATUS: 401 Unauthorized</code></p> <pre><code>{\n    \"message\": \"Invalid Request\"\n}\n</code></pre> <p><code>STATUS: 429 Too Many Requests</code></p> <pre><code>{\n    \"message\": \"You have exhausted your plan limit\"\n}\n</code></pre>"},{"location":"getting-started/#creating-a-gif","title":"Creating a GIF","text":"<p>Make a HTTP request to the following endpoint to create a GIF.</p> <pre><code>POST https://api.pictify.io/gif\n</code></pre> <p>Parameters</p> Parameter Type Description <code>html</code> * <code>string</code> HTML code to be converted to GIF. You can send HTML snippets (<code>&lt;div&gt;...&lt;/div&gt;</code>) or full HTML documents (<code>&lt;html&gt;...&lt;/html&gt;</code>) <code>css</code> <code>string</code> CSS code to be applied to the HTML. <code>width</code> <code>number</code> Width of the viewport in pixels. <code>height</code> <code>number</code> Height of the viewport in pixels. <code>quality</code> <code>number</code> Quality of the GIF. Can be a number between 0 and 100. <code>duration</code> <code>number</code> Duration of the GIF in seconds. <code>template</code> * <code>string</code> ID of the template to be used. <code>variables</code> <code>object</code> Variables to be used in the template. <code>url</code> * <code>string</code> URL of the webpage to be converted to GIF. Required Parameters Description <code>html</code>, <code>url</code>, or <code>template</code> You need to send either <code>html</code>, <code>url</code> or <code>template</code> parameter. <code>variables</code> You need to send <code>variables</code> parameter if you are using a template. <p>Example Response</p> <p><code>STATUS: 200 OK</code></p> <pre><code>{\n    \"url\": \"https://htgf.s3.amazonaws.com/zry20-1698593673023.gif\"\n}\n</code></pre> <p><code>STATUS: 401 Unauthorized</code></p> <pre><code>{\n    \"message\": \"Invalid Request\"\n}\n</code></pre> <p><code>STATUS: 429 Too Many Requests</code></p> <pre><code>{\n    \"message\": \"You have exhausted your plan limit\"\n}\n</code></pre>"},{"location":"getting-started/#getting-a-imagegif","title":"Getting a Image/GIF","text":"<p>Make a HTTP request to the following endpoint to get a image.</p> <pre><code>GET https://media.pictify.io/:id\n</code></pre> <p>Parameters</p> <p>After creating a image/gif, you will get a <code>url</code> in the response. You can use this <code>url</code> to fetch the image/gif. It's automatically cached and optimized via a CDN.</p> Parameter Type Description <code>id</code> * <code>string</code> ID of the image/gif to be fetched. <p>File Formats</p> <p>Images are served in the following formats:</p> <ul> <li><code>png</code></li> <li><code>jpg</code></li> <li><code>webp</code></li> </ul> <p>By default, the API will serve the image in <code>png</code> format if not format is being specified. You can specify the format in the URL.</p> <pre><code>GET https://media.pictify.io/:id.png\n</code></pre> <pre><code>GET https://media.pictify.io/:id.jpg\n</code></pre> <pre><code>GET https://media.pictify.io/:id.webp\n</code></pre>"},{"location":"getting-started/#deleting-a-imagegif","title":"Deleting a Image/GIF","text":"<p>Make a HTTP request to the following endpoint to delete a image/gif.</p> <pre><code>DELETE https://api.pictify.io/:id\n</code></pre> <p>Parameters</p> Parameter Type Description <code>id</code> * <code>string</code> ID of the image/gif to be deleted. <p>Example Response</p> <p><code>STATUS: 200 OK</code></p> <pre><code>{\n    \"message\": \"deleted successfully\"\n}\n</code></pre>"},{"location":"getting-started/#creating-a-template","title":"Creating a Template","text":"<p>Make a HTTP request to the following endpoint to create a template.</p> <pre><code>POST https://api.pictify.io/template\n</code></pre> <p>Parameters</p> Parameter Type Description <code>html</code> * <code>string</code> HTML code to be converted to image. The variables in the HTML should be wrapped in double curly braces. For example,  <code>&lt;div&gt;Hello {{name}}&lt;/div&gt;</code> <code>name</code> <code>string</code> Name of the template. <code>width</code> <code>number</code> Default width of the viewport in pixels. Width can be overridden while creating a image/gif. <code>height</code> <code>number</code> Default height of the viewport in pixels. Height can be overridden while creating a image/gif. <p>Example Response</p> <p><code>STATUS: 200 OK</code></p> <pre><code>{\n    \"template\": {\n        \"id\": \"9tv83\",\n        \"name\": \"My Template\",\n        \"html\": \"&lt;div&gt;Hello {{name}}&lt;/div&gt;\",\n        \"width\": 1200,\n        \"height\": 630,\n        \"createdAt\": \"2021-04-01T12:00:00.000Z\",\n        \"variables\": [\"name\"]\n    }\n}\n</code></pre>"},{"location":"getting-started/#updating-a-template","title":"Updating a Template","text":"<p>Make a HTTP request to the following endpoint to update a template.</p> <pre><code>PUT https://api.pictify.io/template/:id\n</code></pre> <p>Parameters</p> Parameter Type Description <code>id</code> * <code>string</code> ID of the template to be updated. <code>html</code> <code>string</code> HTML code to be converted to image. The variables in the HTML should be wrapped in double curly braces. For example,  <code>&lt;div&gt;Hello {{name}}&lt;/div&gt;</code> <code>name</code> <code>string</code> Name of the template. <code>width</code> <code>number</code> Default width of the viewport in pixels. Width can be overridden while creating a image/gif. <code>height</code> <code>number</code> Default height of the viewport in pixels. Height can be overridden while creating a image/gif. <p>Example Response</p> <p><code>STATUS: 200 OK</code></p> <pre><code>{\n    \"template\": {\n        \"id\": \"9tv83\",\n        \"name\": \"My Template\",\n        \"html\": \"&lt;div&gt;Hello {{name}}&lt;/div&gt;\",\n        \"width\": 1200,\n        \"height\": 630,\n        \"createdAt\": \"2021-04-01T12:00:00.000Z\",\n        \"variables\": [\"name\"]\n  }\n}\n</code></pre>"},{"location":"getting-started/#deleting-a-template","title":"Deleting a Template","text":"<p>Make a HTTP request to the following endpoint to delete a template.</p> <pre><code>DELETE https://api.pictify.io/template/:id\n</code></pre> <p>Parameters</p> Parameter Type Description <code>id</code> * <code>string</code> ID of the template to be deleted. <p>Example Response</p> <p><code>STATUS: 200 OK</code></p> <pre><code>{\n    \"message\": \"deleted successfully\"\n}\n</code></pre>"},{"location":"getting-started/#media-width-and-height","title":"Media Width and Height","text":"<p>We generate the image/gif by rendering the HTML in a instance of Chrome in one of our servers. The width and height of the viewport is automatically calculated by evaluating the outermost element in the HTML. You can override the width and height by passing the <code>width</code> and <code>height</code> parameters in the request.</p>"},{"location":"getting-started/#example","title":"Example","text":"<pre><code>&lt;div style = \"height:500px; width:300px background-color:blue\"&gt;\n\n&lt;/div&gt;\n\n</code></pre> <p>This image generated from the above HTML will be a blue rectangle of size <code>300px</code> x <code>500px</code>. We auto-crop the image to remove any extra whitespace.</p> <p>Although, you can override the width and height by passing the <code>width</code> and <code>height</code> parameters in the request. This will not change the HTML, but will change the viewport size.</p> <p></p> <pre><code>{\n    \"html\": \"&lt;div style = 'height:500px; width:300px background-color:blue'&gt;&lt;/div&gt;\",\n    \"width\": 800,\n    \"height\": 900\n}\n</code></pre> <p></p> <p>This will make the viewport size <code>800px</code> x <code>900px</code>. The rendered image will be similar to how you see the HTML in the browser of size <code>800px</code> x <code>900px</code>.</p>"},{"location":"getting-started/#creating-media-from-a-url","title":"Creating media from a URL","text":"<p>You can also create media from a URL. We will fetch the HTML from the URL and render it in a instance of Chrome in one of our servers. It is better to provide the width and height of the viewport in this case. If you need to create image/gif of a certain part of webpage, you can use the <code>selector</code> parameter to specify the element to be captured.</p> <pre><code>{\n    \"url\": \"https://www.wikipedia.org/\",\n    \"width\": 1200,\n    \"height\": 630,\n    \"selector\": \".central-featured\"\n}\n</code></pre> <p></p> <p>* We don't support URLs that require authentication. You can use our API to create media from a URL only if the URL is publicly accessible.</p>"},{"location":"getting-started/#support","title":"Support","text":"<p>If you need any help, feel free to reach out to us at support@pictify.io</p>"}]}